plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'jacoco'
	id 'org.sonarqube' version '4.4.1.3373'
}

group = 'com.wanted'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

jacoco {
	toolVersion = '0.8.9'
}

configurations {
	asciidoctorExtensions
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	//Querydsl 의존성
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

	//Jackson jsr310 의존성
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

	//Passay 의존성
	implementation 'org.passay:passay:1.6.4'

	//JWT 의존성
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

	//Redis 의존성
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-cache'

	//Spring Rest Docs 의존성
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	//SMTP 의존성
	implementation 'org.springframework.boot:spring-boot-starter-mail'
}

ext {
	snippetsDir = file('build/generated-snippets')
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
	outputs.dir snippetsDir
	finalizedBy 'jacocoTestReport'
}

def querydslDir = 'src/main/generated'
//생성된 QClass gradle clean으로 제거
clean {
	delete file(querydslDir)
}
//QClass 생성 경로 변경
compileJava {
	options.generatedSourceOutputDirectory.set(file(querydslDir))
}

asciidoctor {
	dependsOn test
	configurations 'asciidoctorExtensions'
	inputs.dir snippetsDir
	baseDirFollowsSourceFile()
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

tasks.register('copyDocument', Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}

jacocoTestReport {
	reports {
		html.required = true
		xml.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir("reports/jacocoHtml")
		xml.outputLocation = layout.buildDirectory.file("reports/jacoco.xml")
	}

	def QDomains = []
	for (qPattern in '**/QA'..'**/QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
		QDomains.add(qPattern + '*')
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, excludes: [] + QDomains)
		}))
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	def QDomains = [] as List<String>
	for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
		QDomains.add(qPattern + '*')
	}

	violationRules {
		rule {
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.00 //추후 적절한 값으로 수정
			}
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.00 //추후 적절한 값으로 수정
			}
			excludes = [] + QDomains
		}
	}
}

sonar {
	properties {
		property 'sonar.projectKey', 'safe-wallet'
		property 'sonar.sources', 'src/main'
		property 'sonar.tests', 'src/test'
		property 'sonar.language', 'java'
		property 'sonar.sourceEncoding', 'UTF-8'
		property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco.xml'
		property 'sonar.java.binaries', 'build/classes'
		property 'sonar.test.inclusions', '**/*Test.java'
		property 'sonar.profile', 'Sonar way'
	}
}